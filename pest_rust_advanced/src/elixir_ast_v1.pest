defmodule = { "{:defmodule" ~ ", " ~ metadata ~ ", " ~ "[" ~ alias_name ~ ", " ~ do_block ~ "]}" }

nil = { "nil" }

// Unused
comma = { ", " }

line_number = { "line: " ~ number }

alias_status = { "alias: " ~ bool }

number = { int | float }

int = { ASCII_DIGIT+ }

float = { ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }

unary_op = { "@" | "." | "+" | "-" | "!" | "^" | "not" | "~~~" }

left_op = { "*" | "/" | "+" | "-" }

right_op = { "++" | "--" | "+++" | "---" | ".." | "<>" | "in" | "not in" | "|>" | "<<<" | ">>>" | "<<~" | "~>>" | "<~" | "~>" | "<~>" | "<|>" | "<" | ">" | "<=" | ">=" | "==" | "!=" | "=~" | "===" | "!==" | "&&" | "&&&" | "and" | "||" | "|||" | "or" | "=" | "|" | "::" | "when" | "<-" | "\\" }

map_op = { "=>" }

operator = { unary_op | left_op | right_op | map_op }

unused_characters = { "{" | "}" | "_" | "\\" }

letters = { ( ASCII_ALPHANUMERIC | operator | unused_characters ) * }

string = { "\"" ~ (ASCII_ALPHANUMERIC | operator | unused_characters | "," | " ")* ~ "\"" }

condensed_list = { "'" ~ letters ~ "'" }

bool = { "true" | "false" }

metadata = { nil | metadata_arguments }

metadata_arguments = { ("[" ~ (metadata_argument ~ ", ")* ~ metadata_argument ~ "]") | "[]" }

metadata_argument = { line_number | alias_status }

alias_name = { "{:__aliases__" ~ ", " ~ metadata ~ ", " ~ atoms ~ "}" }

atoms = { "[" ~ (atom)* ~ "]" }

atom = { ":" ~ letters }

do_else =  { "[do: " ~ expression_tuple ~ ", " ~ "else: " ~ expression_tuple ~ "]" }

do_single = { "[do: " ~ expression_tuple ~ "]" }

do_block = { "[do: " ~ block ~ "]" }

do = { do_else | do_block | do_single }

block = { "{:__block__" ~ ", " ~ metadata ~ ", " ~ block_statements ~  "}" }

block_statements = { "[" ~ (block_statement ~ ", ")* ~ block_statement* ~ "]" }

block_statement = { attribute | function_definition | macro | io | directive | expression_tuple }

function_definition = { ("{:def" | "{:defp") ~ ", " ~ metadata ~ ", " ~ "[{" ~ function_name ~ ", " ~ metadata ~ ", " ~ function_arguments ~ "}" ~ ", " ~ do ~ "]}" }

function_arguments = { nil | ("[" ~ (function_argument ~ ", ")* ~ function_argument ~ "]") }

function_argument = { "{" ~ atom ~ ", " ~ metadata ~ ", " ~ nil ~ "}" }

function_name = { atom }

io = { "{:." ~ ", " ~ metadata ~ ", " ~ "[" ~ alias_name ~ ", " ~ ":puts" ~ "]" ~ "}" }

if = { "{:if" ~ ", " ~ metadata ~ ", " ~ conditions ~ "}" }

conditions = { "[" ~  expression_tuple ~ ", " ~ "[" ~ do ~ "]]"}

expression_tuple = { "{" ~ (io | if | atom) ~ ", " ~ metadata ~ ", " ~ expression_arguments ~ "}" } 

expression_arguments = { ("[" ~ (expression_argument ~ ", ")* ~ expression_argument ~ "]") | condensed_list | nil }

expression_argument = { number | string | expression_tuple | do }

attribute = { ":@" ~ ", " ~ metadata ~ ", " ~ attributes }

attributes = { "["~ (single_attribute ~ ", ")* ~ single_attribute ~ "]" }

single_attribute = { doc_attribute }

doc_attribute = { "{:doc" ~ ", " ~ metadata ~ ", " ~ "[" ~ string ~ "]}" }

//TODO complete
macro = { "defmacro" }

//TODO complete
directive = { "import" | "alias" | "require" }

//TODO case, match, send, receive, guards, ranges, for comprehensions, maps...